---

- name: fix CentOS EOL
  ansible.builtin.include_tasks: centos_eol_fix.yml
  when:
    - ansible_distribution == 'CentOS'
    - centos_eol_vault_fix|bool

- name: set pre update os_info
  ansible.builtin.set_fact:
    os_info_pre_update:
      distribution: "{{ ansible_distribution }}"
      distribution_major_version: "{{ ansible_distribution_major_version }}"
      distribution_release: "{{ ansible_distribution_release }}"
      distribution_version: "{{ ansible_distribution_version }}"

- name: current OS version information
  ansible.builtin.debug:
    msg: "{{ os_info_pre_update }}"

- name: gather the package facts
  ansible.builtin.package_facts:
  register: packages_list_pre_update

- name: packages before update
  ansible.builtin.debug:
    msg: "{{ packages_list_pre_update }}"
    verbosity: 3

- name: ensure deltarpm installed
  ansible.builtin.yum:
    name: deltarpm
    state: present
  when: ansible_distribution_major_version|int < 8

- name: check for missing updates
  ansible.builtin.yum:
    list: updates
  become: true
  register: available_updates

- name: show available updates
  ansible.builtin.debug:
    msg: "{{ _msg.split('\n')[:-1] }}"
  vars:
    _msg: |
      {{ inventory_hostname }} has {{ available_updates.results | length }} updates available.
      {% for update in available_updates.results %}
        - {{ update.name }}-{{ update.version }}
      {% endfor %}
  when: available_updates.results is defined

- name: update packages
  ansible.builtin.yum:
    name: "{{ update_distro_packages | default('*') }}"
    exclude: "{{ update_distro_packages_excludes | join(',') }}"
    state: latest
    update_cache: true
    skip_broken: true
  become: true
  ignore_errors: true

- name: check for missing updates
  ansible.builtin.yum:
    list: updates
  become: true
  register: available_updates

- name: show available updates
  ansible.builtin.debug:
    msg: "{{ _msg.split('\n')[:-1] }}"
  vars:
    _msg: |
      {{ inventory_hostname }} has {{ available_updates.results | length }} updates available.
      {% for update in available_updates.results %}
        - {{ update.name }}-{{ update.version }}
      {% endfor %}
  when: available_updates.results is defined

- name: gather the package facts
  ansible.builtin.package_facts:
  register: packages_list_post_update

- name: set latest installed kernel version
  ansible.builtin.set_fact:
    latest_kernel_version: "{{ _version }}-{{ _release }}.{{ _arch }}"
  vars:
    _version: "{{ packages_list_post_update.ansible_facts.packages.kernel[-1].version }}"
    _release: "{{ packages_list_post_update.ansible_facts.packages.kernel[-1].release }}"
    _arch: "{{ packages_list_post_update.ansible_facts.packages.kernel[-1].arch }}"

- name: show current kernel version
  ansible.builtin.debug:
    msg: "{{ ansible_kernel }}"

- name: show installed latest kernel version
  ansible.builtin.debug:
    msg: "{{ latest_kernel_version }}"

- name: check if reboot needed
  ansible.builtin.set_fact:
    system_reboot_needed: "{{ ansible_kernel != latest_kernel_version }}"

- name: show if reboot is needed
  ansible.builtin.debug:
    msg: "Reboot needed (kernel): Current:{{ ansible_kernel }} Latest:{{ latest_kernel_version }}"
  when: system_reboot_needed | bool

- name: reboot if needed
  block:
    - name: reboot the system
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"

    - name: gather facts after update
      ansible.builtin.setup:
        filter: ansible_distribution*

    - name: set post update os info
      ansible.builtin.set_fact:
        os_info_post_update:
          distribution: "{{ ansible_distribution }}"
          distribution_major_version: "{{ ansible_distribution_major_version }}"
          distribution_release: "{{ ansible_distribution_release }}"
          distribution_version: "{{ ansible_distribution_version }}"

    - name: OS version information after reboot
      ansible.builtin.debug:
        msg: "{{ os_info_post_update }}"
  when: update_reboot_kernel and system_reboot_needed
